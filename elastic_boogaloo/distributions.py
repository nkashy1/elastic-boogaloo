import abc
import numpy as np


class DistributionException(Exception):
    pass


class Distribution(metaclass=abc.ABCMeta):
    """
    An abstract probability distribution. Exposes an interface which allows for its use in Bayesian estimation.
    """

    @abc.abstractmethod
    def register(self, value, confidence):
        """
        This is the interface with which to notify the distribution of a value that was generated by sampling from it
        with a given level of confidence.

        :param value: Represents the number that was purportedly generated by sampling from the distribution
        :param confidence: Should be a probability which represents the caller's level of belief that the passed
        value was actually generated by sampling from the distribution
        :return: Nothing, but throws an error if registration failed
        """
        pass

    @abc.abstractmethod
    def density(self, value):
        """
        Returns the value of the probability density function of this distribution at the given value.

        :param value: Argument to the probability density function of the distribution
        :return: Value of the distribution's probability density function at the argument
        """
        pass


class ExponentialDistribution(Distribution):
    def __init__(self, rate):
        self.rate = rate
        self.observation_mean = 1/rate
        self.observations = 0

    def register(self, value, probability=1):
        N = self.observations
        new_mean = (N*self.observation_mean + value*probability)/(N+1)
        self.observation_mean = new_mean
        self.observations += 1
        self.rate = 1/self.observation_mean

    def density(self, value):
        return self.rate*np.exp(-self.rate*value)



# Tests
import unittest


class ExponentialDistributionTest(unittest.TestCase):
    def setUp(self):
        self.distribution = ExponentialDistribution(1)

    def test_register(self):
        distribution = self.distribution
        distribution.register(2, 1)
        self.assertEqual(distribution.observation_mean, 2)
        self.assertEqual(distribution.observations, 1)
        self.assertEqual(distribution.rate, 1/2)

    def test_density(self):
        distribution = self.distribution
        self.assertEqual(distribution.rate, 1)
        self.assertEqual(distribution.density(1), 1/np.e)
